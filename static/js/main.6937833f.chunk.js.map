{"version":3,"sources":["App.js","components/Display.js","components/Button.js","components/ButtonPanel.js","index.js"],"names":["App","input","setInput","useState","handleButtonClick","buttonName","eval","toString","_unused","prev","React","createElement","className","Display","value","ButtonPanel","clickHandler","_ref","Button","name","onClick","map","btn","index","key","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iKAAA,geAKA,MAAMA,IAAMA,KACV,MAAOC,MAAOC,UAAYC,oDAAS,KAE7BC,kBAAqBC,aACzB,GAAmB,OAAfA,WACFH,SAAS,UACJ,GAAmB,MAAfG,WACT,IACEH,SAASI,KAAKL,OAAOM,YACrB,MAAAC,SACAN,SAAS,cAGXA,SAAUO,GAAmB,MAATA,EAAeJ,WAAaI,EAAOJ,aAI3D,OACEK,6CAAAC,cAAA,OAAKC,UAAU,cACbF,6CAAAC,cAACE,mDAAO,CAACC,MAAOb,QAChBS,6CAAAC,cAACI,uDAAW,CAACC,aAAcZ,sBAKlBJ,2B,6BC9Bf,oBAMea,IAJCI,IAAgB,IAAf,MAAEH,GAAOG,EACxB,OAAOP,IAAAC,cAAA,OAAKC,UAAU,WAAWE,K,iDCOpBI,MARAD,IAA6B,IAA5B,KAAEE,EAAI,aAAEH,GAAcC,EACpC,OACEP,IAAAC,cAAA,UAAQC,UAAU,SAASQ,QAASA,IAAMJ,EAAaG,IACpDA,ICgBQJ,IAlBKE,IAAuB,IAAtB,aAAED,GAAcC,EASnC,OACEP,IAAAC,cAAA,OAAKC,UAAU,gBATD,CACd,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,MAKWS,IAAI,CAACC,EAAKC,IACjBb,IAAAC,cAACO,EAAM,CAACM,IAAKD,EAAOJ,KAAMG,EAAKN,aAAcA,Q,6DCfrD,0DAKaS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnB,IAAAC,cAACD,IAAMoB,WAAU,KACfpB,IAAAC,cAACX,IAAG,S","file":"static/js/main.6937833f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Display from \"./components/Display\";\nimport ButtonPanel from \"./components/ButtonPanel\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [input, setInput] = useState(\"0\");\n\n  const handleButtonClick = (buttonName) => {\n    if (buttonName === \"AC\") {\n      setInput(\"0\");\n    } else if (buttonName === \"=\") {\n      try {\n        setInput(eval(input).toString()); // Avoid eval in production\n      } catch {\n        setInput(\"Error\");\n      }\n    } else {\n      setInput((prev) => (prev === \"0\" ? buttonName : prev + buttonName));\n    }\n  };\n\n  return (\n    <div className=\"calculator\">\n      <Display value={input} />\n      <ButtonPanel clickHandler={handleButtonClick} />\n    </div>\n  );\n};\n\nexport default App;","import React from \"react\";\n\nconst Display = ({ value }) => {\n  return <div className=\"display\">{value}</div>;\n};\n\nexport default Display;","import React from \"react\";\n\nconst Button = ({ name, clickHandler }) => {\n  return (\n    <button className=\"button\" onClick={() => clickHandler(name)}>\n      {name}\n    </button>\n  );\n};\n\nexport default Button;","import React from \"react\";\nimport Button from \"./Button\";\n\nconst ButtonPanel = ({ clickHandler }) => {\n  const buttons = [\n    \"7\", \"8\", \"9\", \"/\",\n    \"4\", \"5\", \"6\", \"*\",\n    \"1\", \"2\", \"3\", \"-\",\n    \".\", \"0\", \"=\", \"+\",\n    \"AC\"\n  ];\n\n  return (\n    <div className=\"button-panel\">\n      {buttons.map((btn, index) => (\n        <Button key={index} name={btn} clickHandler={clickHandler} />\n      ))}\n    </div>\n  );\n};\n\nexport default ButtonPanel;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}